Generating the frozen bytecode
* build and install python2.7 somewhere. here, the source is in /tmp/Python-2.7.1 and it was installed into /tmp/root. python needs to be installed for the freeze.py script to work
* $ cat "import re" > code.py
* $ /tmp/root/bin/python2.7 /tmp/Python-2.7.1/Tools/freeze/freeze.py code.py

In a seperate unpack of the Python source code:
* $ mkdir bin && cd bin
* $ cp ${EMSCRIPTEN}/demos/python/ccproxy.py .
* update the ..LLVM.. directories in the script source
* $ chmod +x ccproxy.py
* $ CC=./ccproxy.py ../configure --without-threads --without-pymalloc
* EDIT pyconfig.h (in ./bin), remove
    HAVE_GCC_ASM_FOR_X87
    HAVE_SIG* except SIGNAL_H
  and then add
    #define PY_NO_SHORT_FLOAT_REPR
* edit Python/frozen.c as required.
    #include "Python.h"
    #include "/home/timlocal/working/freeze/M___future__.c"
    #include "/home/timlocal/working/freeze/M_copy_reg.c"
    #include "/home/timlocal/working/freeze/M_re.c"
    #include "/home/timlocal/working/freeze/M_sre_compile.c"
    #include "/home/timlocal/working/freeze/M_sre_constants.c"
    #include "/home/timlocal/working/freeze/M_sre_parse.c"
    #include "/home/timlocal/working/freeze/M_StringIO.c"
    #include "/home/timlocal/working/freeze/M_types.c"
    static struct _frozen Gumby_FrozenModules[] = {
        /* python standard library */
        {"__future__", M___future__, (int)sizeof(M___future__)},
        {"copy_reg", M_copy_reg, (int)sizeof(M_copy_reg)},
        {"re", M_re, (int)sizeof(M_re)},
        {"sre_compile", M_sre_compile, (int)sizeof(M_sre_compile)},
        {"sre_constants", M_sre_constants, (int)sizeof(M_sre_constants)},
        {"sre_parse", M_sre_parse, (int)sizeof(M_sre_parse)},
        {"StringIO", M_StringIO, (int)sizeof(M_StringIO)},
        {"types", M_types, (int)sizeof(M_types)},
        /* sentinel */
        {0, 0, 0}
    };
    struct _frozen *PyImport_FrozenModules = Gumby_FrozenModules;
* $ make
* the make process will fail but we will continue manually
* $ mkdir pylibs && cd pylibs
* $ ar x ../libpython2.7.a
* $ cp ../Modules/python.o .
* $ ${LLVM}/llvm-link -o=python.bc *.o
* $ ${LLVM}/llvm-dis -show-annotations python.bc
* this last step will produce the python.ll file which needs to be fed into the emscripten compiler

Use the emscripten compiler to convert the LLVM python.ll file into JS
* $ ./emscripten.py ~/downloads/Python-2.7.1/bin/pylibs/python.ll > python2.7.1.js

